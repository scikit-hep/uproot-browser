[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "uproot_browser"
authors = [
  { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
maintainers = [
  { name = "The Scikit-HEP admins", email = "scikit-hep-admins@googlegroups.com" },
]

description = "Tools to inspect ROOT files with uproot"
readme = "README.md"

requires-python = ">=3.9"

classifiers = [
  "License :: OSI Approved :: BSD License",
  "Topic :: Scientific/Engineering",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Development Status :: 4 - Beta",
  "Typing :: Typed",
]

dynamic = ["version"]
dependencies = [
  'awkward >=2',
  'click >=8',
  'click-default-group >=1.2',
  'hist >=2.4',
  'lz4>=2',
  'numpy >=1.18',
  'plotext >=5.2.8',
  'rich >=13.3.3',
  'textual >=0.86.0',
  'uproot >=5',
]

[project.optional-dependencies]
iterm = [
  "matplotlib",
  "itermplot==0.5",
  "mplhep",
]

[project.urls]
homepage = "https://github.com/scikit-hep/uproot-browser"
repository = "https://github.com/scikit-hep/uproot-browser"

[project.scripts]
uproot-browser = "uproot_browser.__main__:main"

[dependency-groups]
test = [
  "pytest >=8",
  "pytest-asyncio >=0.24",
  "scikit-hep-testdata >=0.4.10",
]
dev = [
  "ipython >=6",
  "textual-dev",
  {include-group = "test"},
]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/uproot_browser/_version.py"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
  "ignore:can't resolve package from __spec__ or __package__, falling back on __name__ and __path__:ImportWarning",  # PyPy NumPy
]
log_cli_level = "info"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"


[tool.mypy]
files = "src"
python_version = "3.9"
warn_unused_configs = true
strict = true

[[tool.mypy.overrides]]
module = ["plotext.*", "awkward.*", "uproot.*", "matplotlib.*"]
ignore_missing_imports = true


[tool.pylint]
py-version = "3.9"
jobs = "1"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.enable = [
  "useless-suppression",
]
messages_control.disable = [
  "broad-except",
  "design",
  "invalid-name",
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "duplicate-code",
  "unused-argument",  # Handled by Ruff
  "wrong-import-position",  # Handled by Ruff
  "import-outside-toplevel",  # Handled by Ruff
]


[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
    "E501",
    "E722",
    "RUF001",  # Unicode chars
    "PLR",
    "ISC001",  # Conflicts with formatter
]
unfixable = [
  "SIM118", # Dict .keys() removal (uproot)
]

[tool.ruff.lint.per-file-ignores]
"noxfile.py" = ["T20"]
"tests/*" = ["T20"]
"src/uproot_browser/tree.py" = ["UP006"]
